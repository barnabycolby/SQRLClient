package io.barnabycolby.sqrlclient.sqrl;

import android.util.Base64;

import eu.artemisc.stodium.Ed25519;
import eu.artemisc.stodium.Stodium;

import io.barnabycolby.sqrlclient.App;
import io.barnabycolby.sqrlclient.exceptions.CryptographyException;
import io.barnabycolby.sqrlclient.exceptions.InvalidMasterKeyException;
import io.barnabycolby.sqrlclient.R;

import java.nio.charset.Charset;

import org.abstractj.kalium.Sodium;

/**
 * Wraps a SQRL Identity to provide helper methods for using the identity.
 */
public class SQRLIdentity {
    static {
        Stodium.StodiumInit();
    }

    private byte[] mMasterKey;
    private SQRLUri mUri;
    private byte[] mPrivateKey = new byte[64];
    private byte[] mPublicKey = new byte[32];

    public SQRLIdentity(byte[] masterKey, SQRLUri uri) throws InvalidMasterKeyException, CryptographyException {
        if (masterKey == null || uri == null) {
            throw new NullPointerException();
        }

        if (masterKey.length != 32) {
            throw new InvalidMasterKeyException();
        }

        this.mMasterKey = masterKey;
        this.mUri = uri;

        // Compute the private and public key pair for the identity
        byte[] hmacResult = new byte[32];
        byte[] hostNameAsByteArray = uri.getHost().getBytes(Charset.forName("UTF-8"));
        int result = Sodium.crypto_auth_hmacsha256(hmacResult, hostNameAsByteArray, hostNameAsByteArray.length, masterKey);
        checkForCryptographyError(result, R.string.key_generation_failed);
        try {
            Ed25519.keypairSeed(this.mPublicKey, this.mPrivateKey, hmacResult);
        } catch (SecurityException ex) {
            checkForCryptographyError(-1, R.string.key_generation_failed);
        }
    }

    private void checkForCryptographyError(int result, int errorMessage) throws CryptographyException {
        if (result < 0) {
            throw new CryptographyException(App.getApplicationResources().getString(errorMessage));
        }
    }

    /**
     * Gets the SQRL Identity public key.
     *
     * @return The identity key.
     */
    public String getIdentityKey() {
        return Base64.encodeToString(this.mPublicKey, Base64.NO_PADDING | Base64.NO_WRAP | Base64.URL_SAFE);
    }

    /**
     * Signs a message using the private key of the SQRL Identity.
     *
     * @return The signed message.
     * @throws CryptographyException  If an unrecoverable cryptographic error occurs when signing the message.
     */
    public String signUsingIdentityPrivateKey(String message) throws CryptographyException {
        // Sign the message
        byte[] messageAsByteArray = message.getBytes(Charset.forName("UTF-8"));
        byte[] signature = new byte[messageAsByteArray.length + Ed25519.SIGNBYTES]; //Util.prependZeros(64, messageAsByteArray);
        int result = Ed25519.sign(signature, messageAsByteArray, this.mPrivateKey);
        checkForCryptographyError(result, R.string.identity_signature_failed);

        //signature = Util.slice(signature, 0, 64);
        return Base64.encodeToString(signature, Base64.NO_PADDING | Base64.NO_WRAP | Base64.URL_SAFE);
    }

    /**
     * Gets the server unlock key.
     *
     * The server unlock key is originally generated by the client and then sent to the server to keep.
     * If the key is ever needed by the client, then the server will be able to send us the key.
     *
     * Currently this method simply returns a hardcoded key, until support for the identity lock protocol has been added.
     *
     * @return The server unlock key.
     */
    public String getServerUnlockKey() {
        return "Q2l-DBP2nVbYvTA96n4e_2wulWTgjF3Y6hBzSJAYGTE";
    }

    /**
     * Gets the verify unlock key.
     *
     * The verify unlock key is originally generated by the client and then sent to the server.
     * The server uses it to verify any identity changes, signed by the unlock request signing key.
     *
     * Currently this method simply returns a hardcoded key, until support for the identity lock protocol has been added.
     *
     * @return The verify unlock key.
     */
    public String getVerifyUnlockKey() {
        return "17jqvZdMX6Ykcg-TNWQQdVnGyH_SGy3pwhiIrCVBdiY";
    }
}
